// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              6
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          True

#ifndef __IMT_H
#define __IMT_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class imt_finite_element_0: public ufc::finite_element
{
public:

  imt_finite_element_0();

  ~imt_finite_element_0() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class imt_finite_element_1: public ufc::finite_element
{
public:

  imt_finite_element_1();

  ~imt_finite_element_1() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class imt_finite_element_2: public ufc::finite_element
{
public:

  imt_finite_element_2();

  ~imt_finite_element_2() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class imt_finite_element_3: public ufc::finite_element
{
public:

  imt_finite_element_3();

  ~imt_finite_element_3() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override;

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override;

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override;

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override;

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override;

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override;

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c,
                     const ufc::coordinate_mapping * cm=nullptr
                     ) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override;

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override;

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};


class imt_dofmap_0: public ufc::dofmap
{
public:

  imt_dofmap_0();

  ~imt_dofmap_0() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class imt_dofmap_1: public ufc::dofmap
{
public:

  imt_dofmap_1();

  ~imt_dofmap_1() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class imt_dofmap_2: public ufc::dofmap
{
public:

  imt_dofmap_2();

  ~imt_dofmap_2() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class imt_dofmap_3: public ufc::dofmap
{
public:

  imt_dofmap_3();

  ~imt_dofmap_3() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_global_support_dofs() const final override;

  std::size_t num_element_support_dofs() const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  std::size_t num_entity_closure_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};


class imt_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  imt_coordinate_mapping_1();

  ~imt_coordinate_mapping_1() override;

  const char * signature() const final override;

  ufc::coordinate_mapping * create() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t topological_dimension() const final override;

  ufc::shape cell_shape() const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override;

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override;

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override;

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override;

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override;

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override;

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override;

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override;

};


class imt_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  imt_cell_integral_0_otherwise();

  ~imt_cell_integral_0_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_0_0: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_0_0();

  ~imt_exterior_facet_integral_0_0() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_0_1: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_0_1();

  ~imt_exterior_facet_integral_0_1() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_0_otherwise: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_0_otherwise();

  ~imt_exterior_facet_integral_0_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  imt_cell_integral_1_otherwise();

  ~imt_cell_integral_1_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_1_0: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_1_0();

  ~imt_exterior_facet_integral_1_0() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_1_1: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_1_1();

  ~imt_exterior_facet_integral_1_1() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_1_otherwise: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_1_otherwise();

  ~imt_exterior_facet_integral_1_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  imt_cell_integral_2_otherwise();

  ~imt_cell_integral_2_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_3_0: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_3_0();

  ~imt_exterior_facet_integral_3_0() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_cell_integral_4_otherwise: public ufc::cell_integral
{
public:

  imt_cell_integral_4_otherwise();

  ~imt_cell_integral_4_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class imt_cell_integral_5_otherwise: public ufc::cell_integral
{
public:

  imt_cell_integral_5_otherwise();

  ~imt_cell_integral_5_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class imt_cell_integral_6_otherwise: public ufc::cell_integral
{
public:

  imt_cell_integral_6_otherwise();

  ~imt_cell_integral_6_otherwise() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_6_0: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_6_0();

  ~imt_exterior_facet_integral_6_0() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_exterior_facet_integral_6_1: public ufc::exterior_facet_integral
{
public:

  imt_exterior_facet_integral_6_1();

  ~imt_exterior_facet_integral_6_1() override;

  const std::vector<bool> & enabled_coefficients() const final override;

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override;

};


class imt_form_0: public ufc::form
{
public:

  imt_form_0();

  ~imt_form_0() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class imt_form_1: public ufc::form
{
public:

  imt_form_1();

  ~imt_form_1() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class imt_form_2: public ufc::form
{
public:

  imt_form_2();

  ~imt_form_2() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class imt_form_3: public ufc::form
{
public:

  imt_form_3();

  ~imt_form_3() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class imt_form_4: public ufc::form
{
public:

  imt_form_4();

  ~imt_form_4() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class imt_form_5: public ufc::form
{
public:

  imt_form_5();

  ~imt_form_5() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};


class imt_form_6: public ufc::form
{
public:

  imt_form_6();

  ~imt_form_6() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace imt
{

class CoefficientSpace_AN1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_AN1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_AN1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_AN2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_AN2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_AN2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_AN3: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_AN3(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_AN3(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_AU1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_AU1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_AU1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_AU2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_AU2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_AU2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_AU3: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_AU3(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_AU3(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_CHI: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_CHI(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_CHI(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_CHP_IN: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_CHP_IN(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_CHP_IN(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_CPV: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_CPV(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_CPV(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Capacitor: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Capacitor(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Capacitor(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_ECHARGE: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_ECHARGE(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_ECHARGE(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_GNU1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_GNU1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_GNU1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_GNU2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_GNU2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_GNU2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_GNU3: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_GNU3(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_GNU3(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_HTRAN: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_HTRAN(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_HTRAN(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_KAPPAN: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_KAPPAN(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_KAPPAN(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_KAPPAU: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_KAPPAU(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_KAPPAU(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_KB: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_KB(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_KB(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_KEH0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_KEH0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_KEH0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_KN: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_KN(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_KN(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_KU: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_KU(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_KU(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Lx: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Lx(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Lx(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Lz: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Lz(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Lz(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_MEA: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_MEA(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_MEA(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_MEC: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_MEC(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_MEC(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_MHA: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_MHA(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_MHA(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_MHC: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_MHC(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_MHC(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_NC: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_NC(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_NC(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_NV: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_NV(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_NV(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_PERMITTIVITY: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_PERMITTIVITY(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_PERMITTIVITY(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Resistor: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Resistor(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Resistor(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_T1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_T1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_T1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_T2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_T2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_T2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_TC: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_TC(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_TC(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_THETA: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_THETA(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_THETA(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Tcvar: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Tcvar(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Tcvar(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Ts: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Ts(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Ts(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_deff: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_deff(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_deff(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_delV: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_delV(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_delV(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_dt: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_dt(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_etas: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_etas(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_etas(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mus: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mus(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mus(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_nitsche_eps: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_nitsche_eps(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_nitsche_eps(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_s: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u_n: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u_n(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u_n(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_F_FunctionSpace_1;

typedef CoefficientSpace_u_n Form_F_FunctionSpace_2;

typedef CoefficientSpace_dt Form_F_FunctionSpace_3;

typedef CoefficientSpace_Lx Form_F_FunctionSpace_4;

typedef CoefficientSpace_Lz Form_F_FunctionSpace_5;

typedef CoefficientSpace_KB Form_F_FunctionSpace_6;

typedef CoefficientSpace_ECHARGE Form_F_FunctionSpace_7;

typedef CoefficientSpace_TC Form_F_FunctionSpace_8;

typedef CoefficientSpace_T1 Form_F_FunctionSpace_9;

typedef CoefficientSpace_AN1 Form_F_FunctionSpace_10;

typedef CoefficientSpace_AN2 Form_F_FunctionSpace_11;

typedef CoefficientSpace_AN3 Form_F_FunctionSpace_12;

typedef CoefficientSpace_T2 Form_F_FunctionSpace_13;

typedef CoefficientSpace_AU1 Form_F_FunctionSpace_14;

typedef CoefficientSpace_AU2 Form_F_FunctionSpace_15;

typedef CoefficientSpace_AU3 Form_F_FunctionSpace_16;

typedef CoefficientSpace_GNU1 Form_F_FunctionSpace_17;

typedef CoefficientSpace_GNU2 Form_F_FunctionSpace_18;

typedef CoefficientSpace_GNU3 Form_F_FunctionSpace_19;

typedef CoefficientSpace_CHI Form_F_FunctionSpace_20;

typedef CoefficientSpace_KN Form_F_FunctionSpace_21;

typedef CoefficientSpace_KAPPAN Form_F_FunctionSpace_22;

typedef CoefficientSpace_KU Form_F_FunctionSpace_23;

typedef CoefficientSpace_KAPPAU Form_F_FunctionSpace_24;

typedef CoefficientSpace_NC Form_F_FunctionSpace_25;

typedef CoefficientSpace_NV Form_F_FunctionSpace_26;

typedef CoefficientSpace_MEC Form_F_FunctionSpace_27;

typedef CoefficientSpace_MEA Form_F_FunctionSpace_28;

typedef CoefficientSpace_MHC Form_F_FunctionSpace_29;

typedef CoefficientSpace_MHA Form_F_FunctionSpace_30;

typedef CoefficientSpace_KEH0 Form_F_FunctionSpace_31;

typedef CoefficientSpace_PERMITTIVITY Form_F_FunctionSpace_32;

typedef CoefficientSpace_CPV Form_F_FunctionSpace_33;

typedef CoefficientSpace_THETA Form_F_FunctionSpace_34;

typedef CoefficientSpace_HTRAN Form_F_FunctionSpace_35;

typedef CoefficientSpace_CHP_IN Form_F_FunctionSpace_36;

typedef CoefficientSpace_Ts Form_F_FunctionSpace_37;

typedef CoefficientSpace_delV Form_F_FunctionSpace_38;

typedef CoefficientSpace_Resistor Form_F_FunctionSpace_39;

typedef CoefficientSpace_Capacitor Form_F_FunctionSpace_40;

typedef CoefficientSpace_etas Form_F_FunctionSpace_41;

typedef CoefficientSpace_mus Form_F_FunctionSpace_42;

typedef CoefficientSpace_deff Form_F_FunctionSpace_43;

typedef CoefficientSpace_nitsche_eps Form_F_FunctionSpace_44;

typedef CoefficientSpace_Tcvar Form_F_FunctionSpace_45;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 45), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Ts(*this, 36), delV(*this, 37), Resistor(*this, 38), Capacitor(*this, 39), etas(*this, 40), mus(*this, 41), deff(*this, 42), nitsche_eps(*this, 43), Tcvar(*this, 44)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const imt_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> u_n, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> Lx, std::shared_ptr<const dolfin::GenericFunction> Lz, std::shared_ptr<const dolfin::GenericFunction> KB, std::shared_ptr<const dolfin::GenericFunction> ECHARGE, std::shared_ptr<const dolfin::GenericFunction> TC, std::shared_ptr<const dolfin::GenericFunction> T1, std::shared_ptr<const dolfin::GenericFunction> AN1, std::shared_ptr<const dolfin::GenericFunction> AN2, std::shared_ptr<const dolfin::GenericFunction> AN3, std::shared_ptr<const dolfin::GenericFunction> T2, std::shared_ptr<const dolfin::GenericFunction> AU1, std::shared_ptr<const dolfin::GenericFunction> AU2, std::shared_ptr<const dolfin::GenericFunction> AU3, std::shared_ptr<const dolfin::GenericFunction> GNU1, std::shared_ptr<const dolfin::GenericFunction> GNU2, std::shared_ptr<const dolfin::GenericFunction> GNU3, std::shared_ptr<const dolfin::GenericFunction> CHI, std::shared_ptr<const dolfin::GenericFunction> KN, std::shared_ptr<const dolfin::GenericFunction> KAPPAN, std::shared_ptr<const dolfin::GenericFunction> KU, std::shared_ptr<const dolfin::GenericFunction> KAPPAU, std::shared_ptr<const dolfin::GenericFunction> NC, std::shared_ptr<const dolfin::GenericFunction> NV, std::shared_ptr<const dolfin::GenericFunction> MEC, std::shared_ptr<const dolfin::GenericFunction> MEA, std::shared_ptr<const dolfin::GenericFunction> MHC, std::shared_ptr<const dolfin::GenericFunction> MHA, std::shared_ptr<const dolfin::GenericFunction> KEH0, std::shared_ptr<const dolfin::GenericFunction> PERMITTIVITY, std::shared_ptr<const dolfin::GenericFunction> CPV, std::shared_ptr<const dolfin::GenericFunction> THETA, std::shared_ptr<const dolfin::GenericFunction> HTRAN, std::shared_ptr<const dolfin::GenericFunction> CHP_IN, std::shared_ptr<const dolfin::GenericFunction> Ts, std::shared_ptr<const dolfin::GenericFunction> delV, std::shared_ptr<const dolfin::GenericFunction> Resistor, std::shared_ptr<const dolfin::GenericFunction> Capacitor, std::shared_ptr<const dolfin::GenericFunction> etas, std::shared_ptr<const dolfin::GenericFunction> mus, std::shared_ptr<const dolfin::GenericFunction> deff, std::shared_ptr<const dolfin::GenericFunction> nitsche_eps, std::shared_ptr<const dolfin::GenericFunction> Tcvar):
    dolfin::Form(1, 45), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Ts(*this, 36), delV(*this, 37), Resistor(*this, 38), Capacitor(*this, 39), etas(*this, 40), mus(*this, 41), deff(*this, 42), nitsche_eps(*this, 43), Tcvar(*this, 44)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->u_n = u_n;
    this->dt = dt;
    this->Lx = Lx;
    this->Lz = Lz;
    this->KB = KB;
    this->ECHARGE = ECHARGE;
    this->TC = TC;
    this->T1 = T1;
    this->AN1 = AN1;
    this->AN2 = AN2;
    this->AN3 = AN3;
    this->T2 = T2;
    this->AU1 = AU1;
    this->AU2 = AU2;
    this->AU3 = AU3;
    this->GNU1 = GNU1;
    this->GNU2 = GNU2;
    this->GNU3 = GNU3;
    this->CHI = CHI;
    this->KN = KN;
    this->KAPPAN = KAPPAN;
    this->KU = KU;
    this->KAPPAU = KAPPAU;
    this->NC = NC;
    this->NV = NV;
    this->MEC = MEC;
    this->MEA = MEA;
    this->MHC = MHC;
    this->MHA = MHA;
    this->KEH0 = KEH0;
    this->PERMITTIVITY = PERMITTIVITY;
    this->CPV = CPV;
    this->THETA = THETA;
    this->HTRAN = HTRAN;
    this->CHP_IN = CHP_IN;
    this->Ts = Ts;
    this->delV = delV;
    this->Resistor = Resistor;
    this->Capacitor = Capacitor;
    this->etas = etas;
    this->mus = mus;
    this->deff = deff;
    this->nitsche_eps = nitsche_eps;
    this->Tcvar = Tcvar;

    _ufc_form = std::make_shared<const imt_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "u_n")
      return 1;
    else if (name == "dt")
      return 2;
    else if (name == "Lx")
      return 3;
    else if (name == "Lz")
      return 4;
    else if (name == "KB")
      return 5;
    else if (name == "ECHARGE")
      return 6;
    else if (name == "TC")
      return 7;
    else if (name == "T1")
      return 8;
    else if (name == "AN1")
      return 9;
    else if (name == "AN2")
      return 10;
    else if (name == "AN3")
      return 11;
    else if (name == "T2")
      return 12;
    else if (name == "AU1")
      return 13;
    else if (name == "AU2")
      return 14;
    else if (name == "AU3")
      return 15;
    else if (name == "GNU1")
      return 16;
    else if (name == "GNU2")
      return 17;
    else if (name == "GNU3")
      return 18;
    else if (name == "CHI")
      return 19;
    else if (name == "KN")
      return 20;
    else if (name == "KAPPAN")
      return 21;
    else if (name == "KU")
      return 22;
    else if (name == "KAPPAU")
      return 23;
    else if (name == "NC")
      return 24;
    else if (name == "NV")
      return 25;
    else if (name == "MEC")
      return 26;
    else if (name == "MEA")
      return 27;
    else if (name == "MHC")
      return 28;
    else if (name == "MHA")
      return 29;
    else if (name == "KEH0")
      return 30;
    else if (name == "PERMITTIVITY")
      return 31;
    else if (name == "CPV")
      return 32;
    else if (name == "THETA")
      return 33;
    else if (name == "HTRAN")
      return 34;
    else if (name == "CHP_IN")
      return 35;
    else if (name == "Ts")
      return 36;
    else if (name == "delV")
      return 37;
    else if (name == "Resistor")
      return 38;
    else if (name == "Capacitor")
      return 39;
    else if (name == "etas")
      return 40;
    else if (name == "mus")
      return 41;
    else if (name == "deff")
      return 42;
    else if (name == "nitsche_eps")
      return 43;
    else if (name == "Tcvar")
      return 44;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "u_n";
    case 2:
      return "dt";
    case 3:
      return "Lx";
    case 4:
      return "Lz";
    case 5:
      return "KB";
    case 6:
      return "ECHARGE";
    case 7:
      return "TC";
    case 8:
      return "T1";
    case 9:
      return "AN1";
    case 10:
      return "AN2";
    case 11:
      return "AN3";
    case 12:
      return "T2";
    case 13:
      return "AU1";
    case 14:
      return "AU2";
    case 15:
      return "AU3";
    case 16:
      return "GNU1";
    case 17:
      return "GNU2";
    case 18:
      return "GNU3";
    case 19:
      return "CHI";
    case 20:
      return "KN";
    case 21:
      return "KAPPAN";
    case 22:
      return "KU";
    case 23:
      return "KAPPAU";
    case 24:
      return "NC";
    case 25:
      return "NV";
    case 26:
      return "MEC";
    case 27:
      return "MEA";
    case 28:
      return "MHC";
    case 29:
      return "MHA";
    case 30:
      return "KEH0";
    case 31:
      return "PERMITTIVITY";
    case 32:
      return "CPV";
    case 33:
      return "THETA";
    case 34:
      return "HTRAN";
    case 35:
      return "CHP_IN";
    case 36:
      return "Ts";
    case 37:
      return "delV";
    case 38:
      return "Resistor";
    case 39:
      return "Capacitor";
    case 40:
      return "etas";
    case 41:
      return "mus";
    case 42:
      return "deff";
    case 43:
      return "nitsche_eps";
    case 44:
      return "Tcvar";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_u_n;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_Lx;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_Lz;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_KB;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_ECHARGE;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_TC;
  typedef Form_F_FunctionSpace_9 CoefficientSpace_T1;
  typedef Form_F_FunctionSpace_10 CoefficientSpace_AN1;
  typedef Form_F_FunctionSpace_11 CoefficientSpace_AN2;
  typedef Form_F_FunctionSpace_12 CoefficientSpace_AN3;
  typedef Form_F_FunctionSpace_13 CoefficientSpace_T2;
  typedef Form_F_FunctionSpace_14 CoefficientSpace_AU1;
  typedef Form_F_FunctionSpace_15 CoefficientSpace_AU2;
  typedef Form_F_FunctionSpace_16 CoefficientSpace_AU3;
  typedef Form_F_FunctionSpace_17 CoefficientSpace_GNU1;
  typedef Form_F_FunctionSpace_18 CoefficientSpace_GNU2;
  typedef Form_F_FunctionSpace_19 CoefficientSpace_GNU3;
  typedef Form_F_FunctionSpace_20 CoefficientSpace_CHI;
  typedef Form_F_FunctionSpace_21 CoefficientSpace_KN;
  typedef Form_F_FunctionSpace_22 CoefficientSpace_KAPPAN;
  typedef Form_F_FunctionSpace_23 CoefficientSpace_KU;
  typedef Form_F_FunctionSpace_24 CoefficientSpace_KAPPAU;
  typedef Form_F_FunctionSpace_25 CoefficientSpace_NC;
  typedef Form_F_FunctionSpace_26 CoefficientSpace_NV;
  typedef Form_F_FunctionSpace_27 CoefficientSpace_MEC;
  typedef Form_F_FunctionSpace_28 CoefficientSpace_MEA;
  typedef Form_F_FunctionSpace_29 CoefficientSpace_MHC;
  typedef Form_F_FunctionSpace_30 CoefficientSpace_MHA;
  typedef Form_F_FunctionSpace_31 CoefficientSpace_KEH0;
  typedef Form_F_FunctionSpace_32 CoefficientSpace_PERMITTIVITY;
  typedef Form_F_FunctionSpace_33 CoefficientSpace_CPV;
  typedef Form_F_FunctionSpace_34 CoefficientSpace_THETA;
  typedef Form_F_FunctionSpace_35 CoefficientSpace_HTRAN;
  typedef Form_F_FunctionSpace_36 CoefficientSpace_CHP_IN;
  typedef Form_F_FunctionSpace_37 CoefficientSpace_Ts;
  typedef Form_F_FunctionSpace_38 CoefficientSpace_delV;
  typedef Form_F_FunctionSpace_39 CoefficientSpace_Resistor;
  typedef Form_F_FunctionSpace_40 CoefficientSpace_Capacitor;
  typedef Form_F_FunctionSpace_41 CoefficientSpace_etas;
  typedef Form_F_FunctionSpace_42 CoefficientSpace_mus;
  typedef Form_F_FunctionSpace_43 CoefficientSpace_deff;
  typedef Form_F_FunctionSpace_44 CoefficientSpace_nitsche_eps;
  typedef Form_F_FunctionSpace_45 CoefficientSpace_Tcvar;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner u_n;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner Lx;
  dolfin::CoefficientAssigner Lz;
  dolfin::CoefficientAssigner KB;
  dolfin::CoefficientAssigner ECHARGE;
  dolfin::CoefficientAssigner TC;
  dolfin::CoefficientAssigner T1;
  dolfin::CoefficientAssigner AN1;
  dolfin::CoefficientAssigner AN2;
  dolfin::CoefficientAssigner AN3;
  dolfin::CoefficientAssigner T2;
  dolfin::CoefficientAssigner AU1;
  dolfin::CoefficientAssigner AU2;
  dolfin::CoefficientAssigner AU3;
  dolfin::CoefficientAssigner GNU1;
  dolfin::CoefficientAssigner GNU2;
  dolfin::CoefficientAssigner GNU3;
  dolfin::CoefficientAssigner CHI;
  dolfin::CoefficientAssigner KN;
  dolfin::CoefficientAssigner KAPPAN;
  dolfin::CoefficientAssigner KU;
  dolfin::CoefficientAssigner KAPPAU;
  dolfin::CoefficientAssigner NC;
  dolfin::CoefficientAssigner NV;
  dolfin::CoefficientAssigner MEC;
  dolfin::CoefficientAssigner MEA;
  dolfin::CoefficientAssigner MHC;
  dolfin::CoefficientAssigner MHA;
  dolfin::CoefficientAssigner KEH0;
  dolfin::CoefficientAssigner PERMITTIVITY;
  dolfin::CoefficientAssigner CPV;
  dolfin::CoefficientAssigner THETA;
  dolfin::CoefficientAssigner HTRAN;
  dolfin::CoefficientAssigner CHP_IN;
  dolfin::CoefficientAssigner Ts;
  dolfin::CoefficientAssigner delV;
  dolfin::CoefficientAssigner Resistor;
  dolfin::CoefficientAssigner Capacitor;
  dolfin::CoefficientAssigner etas;
  dolfin::CoefficientAssigner mus;
  dolfin::CoefficientAssigner deff;
  dolfin::CoefficientAssigner nitsche_eps;
  dolfin::CoefficientAssigner Tcvar;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Ts(*this, 36), delV(*this, 37), Resistor(*this, 38), Capacitor(*this, 39), etas(*this, 40), mus(*this, 41), deff(*this, 42), nitsche_eps(*this, 43), Tcvar(*this, 44)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> u_n, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> Lx, std::shared_ptr<const dolfin::GenericFunction> Lz, std::shared_ptr<const dolfin::GenericFunction> KB, std::shared_ptr<const dolfin::GenericFunction> ECHARGE, std::shared_ptr<const dolfin::GenericFunction> TC, std::shared_ptr<const dolfin::GenericFunction> T1, std::shared_ptr<const dolfin::GenericFunction> AN1, std::shared_ptr<const dolfin::GenericFunction> AN2, std::shared_ptr<const dolfin::GenericFunction> AN3, std::shared_ptr<const dolfin::GenericFunction> T2, std::shared_ptr<const dolfin::GenericFunction> AU1, std::shared_ptr<const dolfin::GenericFunction> AU2, std::shared_ptr<const dolfin::GenericFunction> AU3, std::shared_ptr<const dolfin::GenericFunction> GNU1, std::shared_ptr<const dolfin::GenericFunction> GNU2, std::shared_ptr<const dolfin::GenericFunction> GNU3, std::shared_ptr<const dolfin::GenericFunction> CHI, std::shared_ptr<const dolfin::GenericFunction> KN, std::shared_ptr<const dolfin::GenericFunction> KAPPAN, std::shared_ptr<const dolfin::GenericFunction> KU, std::shared_ptr<const dolfin::GenericFunction> KAPPAU, std::shared_ptr<const dolfin::GenericFunction> NC, std::shared_ptr<const dolfin::GenericFunction> NV, std::shared_ptr<const dolfin::GenericFunction> MEC, std::shared_ptr<const dolfin::GenericFunction> MEA, std::shared_ptr<const dolfin::GenericFunction> MHC, std::shared_ptr<const dolfin::GenericFunction> MHA, std::shared_ptr<const dolfin::GenericFunction> KEH0, std::shared_ptr<const dolfin::GenericFunction> PERMITTIVITY, std::shared_ptr<const dolfin::GenericFunction> CPV, std::shared_ptr<const dolfin::GenericFunction> THETA, std::shared_ptr<const dolfin::GenericFunction> HTRAN, std::shared_ptr<const dolfin::GenericFunction> CHP_IN, std::shared_ptr<const dolfin::GenericFunction> Ts, std::shared_ptr<const dolfin::GenericFunction> delV, std::shared_ptr<const dolfin::GenericFunction> Resistor, std::shared_ptr<const dolfin::GenericFunction> Capacitor, std::shared_ptr<const dolfin::GenericFunction> etas, std::shared_ptr<const dolfin::GenericFunction> mus, std::shared_ptr<const dolfin::GenericFunction> deff, std::shared_ptr<const dolfin::GenericFunction> nitsche_eps, std::shared_ptr<const dolfin::GenericFunction> Tcvar):
    dolfin::MultiMeshForm(V0), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Ts(*this, 36), delV(*this, 37), Resistor(*this, 38), Capacitor(*this, 39), etas(*this, 40), mus(*this, 41), deff(*this, 42), nitsche_eps(*this, 43), Tcvar(*this, 44)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->u_n = u_n;
    this->dt = dt;
    this->Lx = Lx;
    this->Lz = Lz;
    this->KB = KB;
    this->ECHARGE = ECHARGE;
    this->TC = TC;
    this->T1 = T1;
    this->AN1 = AN1;
    this->AN2 = AN2;
    this->AN3 = AN3;
    this->T2 = T2;
    this->AU1 = AU1;
    this->AU2 = AU2;
    this->AU3 = AU3;
    this->GNU1 = GNU1;
    this->GNU2 = GNU2;
    this->GNU3 = GNU3;
    this->CHI = CHI;
    this->KN = KN;
    this->KAPPAN = KAPPAN;
    this->KU = KU;
    this->KAPPAU = KAPPAU;
    this->NC = NC;
    this->NV = NV;
    this->MEC = MEC;
    this->MEA = MEA;
    this->MHC = MHC;
    this->MHA = MHA;
    this->KEH0 = KEH0;
    this->PERMITTIVITY = PERMITTIVITY;
    this->CPV = CPV;
    this->THETA = THETA;
    this->HTRAN = HTRAN;
    this->CHP_IN = CHP_IN;
    this->Ts = Ts;
    this->delV = delV;
    this->Resistor = Resistor;
    this->Capacitor = Capacitor;
    this->etas = etas;
    this->mus = mus;
    this->deff = deff;
    this->nitsche_eps = nitsche_eps;
    this->Tcvar = Tcvar;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "u_n")
      return 1;
    else if (name == "dt")
      return 2;
    else if (name == "Lx")
      return 3;
    else if (name == "Lz")
      return 4;
    else if (name == "KB")
      return 5;
    else if (name == "ECHARGE")
      return 6;
    else if (name == "TC")
      return 7;
    else if (name == "T1")
      return 8;
    else if (name == "AN1")
      return 9;
    else if (name == "AN2")
      return 10;
    else if (name == "AN3")
      return 11;
    else if (name == "T2")
      return 12;
    else if (name == "AU1")
      return 13;
    else if (name == "AU2")
      return 14;
    else if (name == "AU3")
      return 15;
    else if (name == "GNU1")
      return 16;
    else if (name == "GNU2")
      return 17;
    else if (name == "GNU3")
      return 18;
    else if (name == "CHI")
      return 19;
    else if (name == "KN")
      return 20;
    else if (name == "KAPPAN")
      return 21;
    else if (name == "KU")
      return 22;
    else if (name == "KAPPAU")
      return 23;
    else if (name == "NC")
      return 24;
    else if (name == "NV")
      return 25;
    else if (name == "MEC")
      return 26;
    else if (name == "MEA")
      return 27;
    else if (name == "MHC")
      return 28;
    else if (name == "MHA")
      return 29;
    else if (name == "KEH0")
      return 30;
    else if (name == "PERMITTIVITY")
      return 31;
    else if (name == "CPV")
      return 32;
    else if (name == "THETA")
      return 33;
    else if (name == "HTRAN")
      return 34;
    else if (name == "CHP_IN")
      return 35;
    else if (name == "Ts")
      return 36;
    else if (name == "delV")
      return 37;
    else if (name == "Resistor")
      return 38;
    else if (name == "Capacitor")
      return 39;
    else if (name == "etas")
      return 40;
    else if (name == "mus")
      return 41;
    else if (name == "deff")
      return 42;
    else if (name == "nitsche_eps")
      return 43;
    else if (name == "Tcvar")
      return 44;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "u_n";
    case 2:
      return "dt";
    case 3:
      return "Lx";
    case 4:
      return "Lz";
    case 5:
      return "KB";
    case 6:
      return "ECHARGE";
    case 7:
      return "TC";
    case 8:
      return "T1";
    case 9:
      return "AN1";
    case 10:
      return "AN2";
    case 11:
      return "AN3";
    case 12:
      return "T2";
    case 13:
      return "AU1";
    case 14:
      return "AU2";
    case 15:
      return "AU3";
    case 16:
      return "GNU1";
    case 17:
      return "GNU2";
    case 18:
      return "GNU3";
    case 19:
      return "CHI";
    case 20:
      return "KN";
    case 21:
      return "KAPPAN";
    case 22:
      return "KU";
    case 23:
      return "KAPPAU";
    case 24:
      return "NC";
    case 25:
      return "NV";
    case 26:
      return "MEC";
    case 27:
      return "MEA";
    case 28:
      return "MHC";
    case 29:
      return "MHA";
    case 30:
      return "KEH0";
    case 31:
      return "PERMITTIVITY";
    case 32:
      return "CPV";
    case 33:
      return "THETA";
    case 34:
      return "HTRAN";
    case 35:
      return "CHP_IN";
    case 36:
      return "Ts";
    case 37:
      return "delV";
    case 38:
      return "Resistor";
    case 39:
      return "Capacitor";
    case 40:
      return "etas";
    case 41:
      return "mus";
    case 42:
      return "deff";
    case 43:
      return "nitsche_eps";
    case 44:
      return "Tcvar";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_u_n;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_dt;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_Lx;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_Lz;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_KB;
  typedef Form_F_FunctionSpace_7 CoefficientSpace_ECHARGE;
  typedef Form_F_FunctionSpace_8 CoefficientSpace_TC;
  typedef Form_F_FunctionSpace_9 CoefficientSpace_T1;
  typedef Form_F_FunctionSpace_10 CoefficientSpace_AN1;
  typedef Form_F_FunctionSpace_11 CoefficientSpace_AN2;
  typedef Form_F_FunctionSpace_12 CoefficientSpace_AN3;
  typedef Form_F_FunctionSpace_13 CoefficientSpace_T2;
  typedef Form_F_FunctionSpace_14 CoefficientSpace_AU1;
  typedef Form_F_FunctionSpace_15 CoefficientSpace_AU2;
  typedef Form_F_FunctionSpace_16 CoefficientSpace_AU3;
  typedef Form_F_FunctionSpace_17 CoefficientSpace_GNU1;
  typedef Form_F_FunctionSpace_18 CoefficientSpace_GNU2;
  typedef Form_F_FunctionSpace_19 CoefficientSpace_GNU3;
  typedef Form_F_FunctionSpace_20 CoefficientSpace_CHI;
  typedef Form_F_FunctionSpace_21 CoefficientSpace_KN;
  typedef Form_F_FunctionSpace_22 CoefficientSpace_KAPPAN;
  typedef Form_F_FunctionSpace_23 CoefficientSpace_KU;
  typedef Form_F_FunctionSpace_24 CoefficientSpace_KAPPAU;
  typedef Form_F_FunctionSpace_25 CoefficientSpace_NC;
  typedef Form_F_FunctionSpace_26 CoefficientSpace_NV;
  typedef Form_F_FunctionSpace_27 CoefficientSpace_MEC;
  typedef Form_F_FunctionSpace_28 CoefficientSpace_MEA;
  typedef Form_F_FunctionSpace_29 CoefficientSpace_MHC;
  typedef Form_F_FunctionSpace_30 CoefficientSpace_MHA;
  typedef Form_F_FunctionSpace_31 CoefficientSpace_KEH0;
  typedef Form_F_FunctionSpace_32 CoefficientSpace_PERMITTIVITY;
  typedef Form_F_FunctionSpace_33 CoefficientSpace_CPV;
  typedef Form_F_FunctionSpace_34 CoefficientSpace_THETA;
  typedef Form_F_FunctionSpace_35 CoefficientSpace_HTRAN;
  typedef Form_F_FunctionSpace_36 CoefficientSpace_CHP_IN;
  typedef Form_F_FunctionSpace_37 CoefficientSpace_Ts;
  typedef Form_F_FunctionSpace_38 CoefficientSpace_delV;
  typedef Form_F_FunctionSpace_39 CoefficientSpace_Resistor;
  typedef Form_F_FunctionSpace_40 CoefficientSpace_Capacitor;
  typedef Form_F_FunctionSpace_41 CoefficientSpace_etas;
  typedef Form_F_FunctionSpace_42 CoefficientSpace_mus;
  typedef Form_F_FunctionSpace_43 CoefficientSpace_deff;
  typedef Form_F_FunctionSpace_44 CoefficientSpace_nitsche_eps;
  typedef Form_F_FunctionSpace_45 CoefficientSpace_Tcvar;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner u_n;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner Lx;
  dolfin::MultiMeshCoefficientAssigner Lz;
  dolfin::MultiMeshCoefficientAssigner KB;
  dolfin::MultiMeshCoefficientAssigner ECHARGE;
  dolfin::MultiMeshCoefficientAssigner TC;
  dolfin::MultiMeshCoefficientAssigner T1;
  dolfin::MultiMeshCoefficientAssigner AN1;
  dolfin::MultiMeshCoefficientAssigner AN2;
  dolfin::MultiMeshCoefficientAssigner AN3;
  dolfin::MultiMeshCoefficientAssigner T2;
  dolfin::MultiMeshCoefficientAssigner AU1;
  dolfin::MultiMeshCoefficientAssigner AU2;
  dolfin::MultiMeshCoefficientAssigner AU3;
  dolfin::MultiMeshCoefficientAssigner GNU1;
  dolfin::MultiMeshCoefficientAssigner GNU2;
  dolfin::MultiMeshCoefficientAssigner GNU3;
  dolfin::MultiMeshCoefficientAssigner CHI;
  dolfin::MultiMeshCoefficientAssigner KN;
  dolfin::MultiMeshCoefficientAssigner KAPPAN;
  dolfin::MultiMeshCoefficientAssigner KU;
  dolfin::MultiMeshCoefficientAssigner KAPPAU;
  dolfin::MultiMeshCoefficientAssigner NC;
  dolfin::MultiMeshCoefficientAssigner NV;
  dolfin::MultiMeshCoefficientAssigner MEC;
  dolfin::MultiMeshCoefficientAssigner MEA;
  dolfin::MultiMeshCoefficientAssigner MHC;
  dolfin::MultiMeshCoefficientAssigner MHA;
  dolfin::MultiMeshCoefficientAssigner KEH0;
  dolfin::MultiMeshCoefficientAssigner PERMITTIVITY;
  dolfin::MultiMeshCoefficientAssigner CPV;
  dolfin::MultiMeshCoefficientAssigner THETA;
  dolfin::MultiMeshCoefficientAssigner HTRAN;
  dolfin::MultiMeshCoefficientAssigner CHP_IN;
  dolfin::MultiMeshCoefficientAssigner Ts;
  dolfin::MultiMeshCoefficientAssigner delV;
  dolfin::MultiMeshCoefficientAssigner Resistor;
  dolfin::MultiMeshCoefficientAssigner Capacitor;
  dolfin::MultiMeshCoefficientAssigner etas;
  dolfin::MultiMeshCoefficientAssigner mus;
  dolfin::MultiMeshCoefficientAssigner deff;
  dolfin::MultiMeshCoefficientAssigner nitsche_eps;
  dolfin::MultiMeshCoefficientAssigner Tcvar;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_J_FunctionSpace_2;

typedef CoefficientSpace_u_n Form_J_FunctionSpace_3;

typedef CoefficientSpace_dt Form_J_FunctionSpace_4;

typedef CoefficientSpace_Lx Form_J_FunctionSpace_5;

typedef CoefficientSpace_Lz Form_J_FunctionSpace_6;

typedef CoefficientSpace_KB Form_J_FunctionSpace_7;

typedef CoefficientSpace_ECHARGE Form_J_FunctionSpace_8;

typedef CoefficientSpace_TC Form_J_FunctionSpace_9;

typedef CoefficientSpace_T1 Form_J_FunctionSpace_10;

typedef CoefficientSpace_AN1 Form_J_FunctionSpace_11;

typedef CoefficientSpace_AN2 Form_J_FunctionSpace_12;

typedef CoefficientSpace_AN3 Form_J_FunctionSpace_13;

typedef CoefficientSpace_T2 Form_J_FunctionSpace_14;

typedef CoefficientSpace_AU1 Form_J_FunctionSpace_15;

typedef CoefficientSpace_AU2 Form_J_FunctionSpace_16;

typedef CoefficientSpace_AU3 Form_J_FunctionSpace_17;

typedef CoefficientSpace_GNU1 Form_J_FunctionSpace_18;

typedef CoefficientSpace_GNU2 Form_J_FunctionSpace_19;

typedef CoefficientSpace_GNU3 Form_J_FunctionSpace_20;

typedef CoefficientSpace_CHI Form_J_FunctionSpace_21;

typedef CoefficientSpace_KN Form_J_FunctionSpace_22;

typedef CoefficientSpace_KAPPAN Form_J_FunctionSpace_23;

typedef CoefficientSpace_KU Form_J_FunctionSpace_24;

typedef CoefficientSpace_KAPPAU Form_J_FunctionSpace_25;

typedef CoefficientSpace_NC Form_J_FunctionSpace_26;

typedef CoefficientSpace_NV Form_J_FunctionSpace_27;

typedef CoefficientSpace_MEC Form_J_FunctionSpace_28;

typedef CoefficientSpace_MEA Form_J_FunctionSpace_29;

typedef CoefficientSpace_MHC Form_J_FunctionSpace_30;

typedef CoefficientSpace_MHA Form_J_FunctionSpace_31;

typedef CoefficientSpace_KEH0 Form_J_FunctionSpace_32;

typedef CoefficientSpace_PERMITTIVITY Form_J_FunctionSpace_33;

typedef CoefficientSpace_CPV Form_J_FunctionSpace_34;

typedef CoefficientSpace_THETA Form_J_FunctionSpace_35;

typedef CoefficientSpace_HTRAN Form_J_FunctionSpace_36;

typedef CoefficientSpace_CHP_IN Form_J_FunctionSpace_37;

typedef CoefficientSpace_Resistor Form_J_FunctionSpace_38;

typedef CoefficientSpace_Capacitor Form_J_FunctionSpace_39;

typedef CoefficientSpace_deff Form_J_FunctionSpace_40;

typedef CoefficientSpace_nitsche_eps Form_J_FunctionSpace_41;

typedef CoefficientSpace_Tcvar Form_J_FunctionSpace_42;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 41), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Resistor(*this, 36), Capacitor(*this, 37), deff(*this, 38), nitsche_eps(*this, 39), Tcvar(*this, 40)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const imt_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> u_n, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> Lx, std::shared_ptr<const dolfin::GenericFunction> Lz, std::shared_ptr<const dolfin::GenericFunction> KB, std::shared_ptr<const dolfin::GenericFunction> ECHARGE, std::shared_ptr<const dolfin::GenericFunction> TC, std::shared_ptr<const dolfin::GenericFunction> T1, std::shared_ptr<const dolfin::GenericFunction> AN1, std::shared_ptr<const dolfin::GenericFunction> AN2, std::shared_ptr<const dolfin::GenericFunction> AN3, std::shared_ptr<const dolfin::GenericFunction> T2, std::shared_ptr<const dolfin::GenericFunction> AU1, std::shared_ptr<const dolfin::GenericFunction> AU2, std::shared_ptr<const dolfin::GenericFunction> AU3, std::shared_ptr<const dolfin::GenericFunction> GNU1, std::shared_ptr<const dolfin::GenericFunction> GNU2, std::shared_ptr<const dolfin::GenericFunction> GNU3, std::shared_ptr<const dolfin::GenericFunction> CHI, std::shared_ptr<const dolfin::GenericFunction> KN, std::shared_ptr<const dolfin::GenericFunction> KAPPAN, std::shared_ptr<const dolfin::GenericFunction> KU, std::shared_ptr<const dolfin::GenericFunction> KAPPAU, std::shared_ptr<const dolfin::GenericFunction> NC, std::shared_ptr<const dolfin::GenericFunction> NV, std::shared_ptr<const dolfin::GenericFunction> MEC, std::shared_ptr<const dolfin::GenericFunction> MEA, std::shared_ptr<const dolfin::GenericFunction> MHC, std::shared_ptr<const dolfin::GenericFunction> MHA, std::shared_ptr<const dolfin::GenericFunction> KEH0, std::shared_ptr<const dolfin::GenericFunction> PERMITTIVITY, std::shared_ptr<const dolfin::GenericFunction> CPV, std::shared_ptr<const dolfin::GenericFunction> THETA, std::shared_ptr<const dolfin::GenericFunction> HTRAN, std::shared_ptr<const dolfin::GenericFunction> CHP_IN, std::shared_ptr<const dolfin::GenericFunction> Resistor, std::shared_ptr<const dolfin::GenericFunction> Capacitor, std::shared_ptr<const dolfin::GenericFunction> deff, std::shared_ptr<const dolfin::GenericFunction> nitsche_eps, std::shared_ptr<const dolfin::GenericFunction> Tcvar):
    dolfin::Form(2, 41), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Resistor(*this, 36), Capacitor(*this, 37), deff(*this, 38), nitsche_eps(*this, 39), Tcvar(*this, 40)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = u;
    this->u_n = u_n;
    this->dt = dt;
    this->Lx = Lx;
    this->Lz = Lz;
    this->KB = KB;
    this->ECHARGE = ECHARGE;
    this->TC = TC;
    this->T1 = T1;
    this->AN1 = AN1;
    this->AN2 = AN2;
    this->AN3 = AN3;
    this->T2 = T2;
    this->AU1 = AU1;
    this->AU2 = AU2;
    this->AU3 = AU3;
    this->GNU1 = GNU1;
    this->GNU2 = GNU2;
    this->GNU3 = GNU3;
    this->CHI = CHI;
    this->KN = KN;
    this->KAPPAN = KAPPAN;
    this->KU = KU;
    this->KAPPAU = KAPPAU;
    this->NC = NC;
    this->NV = NV;
    this->MEC = MEC;
    this->MEA = MEA;
    this->MHC = MHC;
    this->MHA = MHA;
    this->KEH0 = KEH0;
    this->PERMITTIVITY = PERMITTIVITY;
    this->CPV = CPV;
    this->THETA = THETA;
    this->HTRAN = HTRAN;
    this->CHP_IN = CHP_IN;
    this->Resistor = Resistor;
    this->Capacitor = Capacitor;
    this->deff = deff;
    this->nitsche_eps = nitsche_eps;
    this->Tcvar = Tcvar;

    _ufc_form = std::make_shared<const imt_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "u_n")
      return 1;
    else if (name == "dt")
      return 2;
    else if (name == "Lx")
      return 3;
    else if (name == "Lz")
      return 4;
    else if (name == "KB")
      return 5;
    else if (name == "ECHARGE")
      return 6;
    else if (name == "TC")
      return 7;
    else if (name == "T1")
      return 8;
    else if (name == "AN1")
      return 9;
    else if (name == "AN2")
      return 10;
    else if (name == "AN3")
      return 11;
    else if (name == "T2")
      return 12;
    else if (name == "AU1")
      return 13;
    else if (name == "AU2")
      return 14;
    else if (name == "AU3")
      return 15;
    else if (name == "GNU1")
      return 16;
    else if (name == "GNU2")
      return 17;
    else if (name == "GNU3")
      return 18;
    else if (name == "CHI")
      return 19;
    else if (name == "KN")
      return 20;
    else if (name == "KAPPAN")
      return 21;
    else if (name == "KU")
      return 22;
    else if (name == "KAPPAU")
      return 23;
    else if (name == "NC")
      return 24;
    else if (name == "NV")
      return 25;
    else if (name == "MEC")
      return 26;
    else if (name == "MEA")
      return 27;
    else if (name == "MHC")
      return 28;
    else if (name == "MHA")
      return 29;
    else if (name == "KEH0")
      return 30;
    else if (name == "PERMITTIVITY")
      return 31;
    else if (name == "CPV")
      return 32;
    else if (name == "THETA")
      return 33;
    else if (name == "HTRAN")
      return 34;
    else if (name == "CHP_IN")
      return 35;
    else if (name == "Resistor")
      return 36;
    else if (name == "Capacitor")
      return 37;
    else if (name == "deff")
      return 38;
    else if (name == "nitsche_eps")
      return 39;
    else if (name == "Tcvar")
      return 40;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "u_n";
    case 2:
      return "dt";
    case 3:
      return "Lx";
    case 4:
      return "Lz";
    case 5:
      return "KB";
    case 6:
      return "ECHARGE";
    case 7:
      return "TC";
    case 8:
      return "T1";
    case 9:
      return "AN1";
    case 10:
      return "AN2";
    case 11:
      return "AN3";
    case 12:
      return "T2";
    case 13:
      return "AU1";
    case 14:
      return "AU2";
    case 15:
      return "AU3";
    case 16:
      return "GNU1";
    case 17:
      return "GNU2";
    case 18:
      return "GNU3";
    case 19:
      return "CHI";
    case 20:
      return "KN";
    case 21:
      return "KAPPAN";
    case 22:
      return "KU";
    case 23:
      return "KAPPAU";
    case 24:
      return "NC";
    case 25:
      return "NV";
    case 26:
      return "MEC";
    case 27:
      return "MEA";
    case 28:
      return "MHC";
    case 29:
      return "MHA";
    case 30:
      return "KEH0";
    case 31:
      return "PERMITTIVITY";
    case 32:
      return "CPV";
    case 33:
      return "THETA";
    case 34:
      return "HTRAN";
    case 35:
      return "CHP_IN";
    case 36:
      return "Resistor";
    case 37:
      return "Capacitor";
    case 38:
      return "deff";
    case 39:
      return "nitsche_eps";
    case 40:
      return "Tcvar";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_u_n;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_Lx;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_Lz;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_KB;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_ECHARGE;
  typedef Form_J_FunctionSpace_9 CoefficientSpace_TC;
  typedef Form_J_FunctionSpace_10 CoefficientSpace_T1;
  typedef Form_J_FunctionSpace_11 CoefficientSpace_AN1;
  typedef Form_J_FunctionSpace_12 CoefficientSpace_AN2;
  typedef Form_J_FunctionSpace_13 CoefficientSpace_AN3;
  typedef Form_J_FunctionSpace_14 CoefficientSpace_T2;
  typedef Form_J_FunctionSpace_15 CoefficientSpace_AU1;
  typedef Form_J_FunctionSpace_16 CoefficientSpace_AU2;
  typedef Form_J_FunctionSpace_17 CoefficientSpace_AU3;
  typedef Form_J_FunctionSpace_18 CoefficientSpace_GNU1;
  typedef Form_J_FunctionSpace_19 CoefficientSpace_GNU2;
  typedef Form_J_FunctionSpace_20 CoefficientSpace_GNU3;
  typedef Form_J_FunctionSpace_21 CoefficientSpace_CHI;
  typedef Form_J_FunctionSpace_22 CoefficientSpace_KN;
  typedef Form_J_FunctionSpace_23 CoefficientSpace_KAPPAN;
  typedef Form_J_FunctionSpace_24 CoefficientSpace_KU;
  typedef Form_J_FunctionSpace_25 CoefficientSpace_KAPPAU;
  typedef Form_J_FunctionSpace_26 CoefficientSpace_NC;
  typedef Form_J_FunctionSpace_27 CoefficientSpace_NV;
  typedef Form_J_FunctionSpace_28 CoefficientSpace_MEC;
  typedef Form_J_FunctionSpace_29 CoefficientSpace_MEA;
  typedef Form_J_FunctionSpace_30 CoefficientSpace_MHC;
  typedef Form_J_FunctionSpace_31 CoefficientSpace_MHA;
  typedef Form_J_FunctionSpace_32 CoefficientSpace_KEH0;
  typedef Form_J_FunctionSpace_33 CoefficientSpace_PERMITTIVITY;
  typedef Form_J_FunctionSpace_34 CoefficientSpace_CPV;
  typedef Form_J_FunctionSpace_35 CoefficientSpace_THETA;
  typedef Form_J_FunctionSpace_36 CoefficientSpace_HTRAN;
  typedef Form_J_FunctionSpace_37 CoefficientSpace_CHP_IN;
  typedef Form_J_FunctionSpace_38 CoefficientSpace_Resistor;
  typedef Form_J_FunctionSpace_39 CoefficientSpace_Capacitor;
  typedef Form_J_FunctionSpace_40 CoefficientSpace_deff;
  typedef Form_J_FunctionSpace_41 CoefficientSpace_nitsche_eps;
  typedef Form_J_FunctionSpace_42 CoefficientSpace_Tcvar;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner u_n;
  dolfin::CoefficientAssigner dt;
  dolfin::CoefficientAssigner Lx;
  dolfin::CoefficientAssigner Lz;
  dolfin::CoefficientAssigner KB;
  dolfin::CoefficientAssigner ECHARGE;
  dolfin::CoefficientAssigner TC;
  dolfin::CoefficientAssigner T1;
  dolfin::CoefficientAssigner AN1;
  dolfin::CoefficientAssigner AN2;
  dolfin::CoefficientAssigner AN3;
  dolfin::CoefficientAssigner T2;
  dolfin::CoefficientAssigner AU1;
  dolfin::CoefficientAssigner AU2;
  dolfin::CoefficientAssigner AU3;
  dolfin::CoefficientAssigner GNU1;
  dolfin::CoefficientAssigner GNU2;
  dolfin::CoefficientAssigner GNU3;
  dolfin::CoefficientAssigner CHI;
  dolfin::CoefficientAssigner KN;
  dolfin::CoefficientAssigner KAPPAN;
  dolfin::CoefficientAssigner KU;
  dolfin::CoefficientAssigner KAPPAU;
  dolfin::CoefficientAssigner NC;
  dolfin::CoefficientAssigner NV;
  dolfin::CoefficientAssigner MEC;
  dolfin::CoefficientAssigner MEA;
  dolfin::CoefficientAssigner MHC;
  dolfin::CoefficientAssigner MHA;
  dolfin::CoefficientAssigner KEH0;
  dolfin::CoefficientAssigner PERMITTIVITY;
  dolfin::CoefficientAssigner CPV;
  dolfin::CoefficientAssigner THETA;
  dolfin::CoefficientAssigner HTRAN;
  dolfin::CoefficientAssigner CHP_IN;
  dolfin::CoefficientAssigner Resistor;
  dolfin::CoefficientAssigner Capacitor;
  dolfin::CoefficientAssigner deff;
  dolfin::CoefficientAssigner nitsche_eps;
  dolfin::CoefficientAssigner Tcvar;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Resistor(*this, 36), Capacitor(*this, 37), deff(*this, 38), nitsche_eps(*this, 39), Tcvar(*this, 40)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> u_n, std::shared_ptr<const dolfin::GenericFunction> dt, std::shared_ptr<const dolfin::GenericFunction> Lx, std::shared_ptr<const dolfin::GenericFunction> Lz, std::shared_ptr<const dolfin::GenericFunction> KB, std::shared_ptr<const dolfin::GenericFunction> ECHARGE, std::shared_ptr<const dolfin::GenericFunction> TC, std::shared_ptr<const dolfin::GenericFunction> T1, std::shared_ptr<const dolfin::GenericFunction> AN1, std::shared_ptr<const dolfin::GenericFunction> AN2, std::shared_ptr<const dolfin::GenericFunction> AN3, std::shared_ptr<const dolfin::GenericFunction> T2, std::shared_ptr<const dolfin::GenericFunction> AU1, std::shared_ptr<const dolfin::GenericFunction> AU2, std::shared_ptr<const dolfin::GenericFunction> AU3, std::shared_ptr<const dolfin::GenericFunction> GNU1, std::shared_ptr<const dolfin::GenericFunction> GNU2, std::shared_ptr<const dolfin::GenericFunction> GNU3, std::shared_ptr<const dolfin::GenericFunction> CHI, std::shared_ptr<const dolfin::GenericFunction> KN, std::shared_ptr<const dolfin::GenericFunction> KAPPAN, std::shared_ptr<const dolfin::GenericFunction> KU, std::shared_ptr<const dolfin::GenericFunction> KAPPAU, std::shared_ptr<const dolfin::GenericFunction> NC, std::shared_ptr<const dolfin::GenericFunction> NV, std::shared_ptr<const dolfin::GenericFunction> MEC, std::shared_ptr<const dolfin::GenericFunction> MEA, std::shared_ptr<const dolfin::GenericFunction> MHC, std::shared_ptr<const dolfin::GenericFunction> MHA, std::shared_ptr<const dolfin::GenericFunction> KEH0, std::shared_ptr<const dolfin::GenericFunction> PERMITTIVITY, std::shared_ptr<const dolfin::GenericFunction> CPV, std::shared_ptr<const dolfin::GenericFunction> THETA, std::shared_ptr<const dolfin::GenericFunction> HTRAN, std::shared_ptr<const dolfin::GenericFunction> CHP_IN, std::shared_ptr<const dolfin::GenericFunction> Resistor, std::shared_ptr<const dolfin::GenericFunction> Capacitor, std::shared_ptr<const dolfin::GenericFunction> deff, std::shared_ptr<const dolfin::GenericFunction> nitsche_eps, std::shared_ptr<const dolfin::GenericFunction> Tcvar):
    dolfin::MultiMeshForm(V1, V0), u(*this, 0), u_n(*this, 1), dt(*this, 2), Lx(*this, 3), Lz(*this, 4), KB(*this, 5), ECHARGE(*this, 6), TC(*this, 7), T1(*this, 8), AN1(*this, 9), AN2(*this, 10), AN3(*this, 11), T2(*this, 12), AU1(*this, 13), AU2(*this, 14), AU3(*this, 15), GNU1(*this, 16), GNU2(*this, 17), GNU3(*this, 18), CHI(*this, 19), KN(*this, 20), KAPPAN(*this, 21), KU(*this, 22), KAPPAU(*this, 23), NC(*this, 24), NV(*this, 25), MEC(*this, 26), MEA(*this, 27), MHC(*this, 28), MHA(*this, 29), KEH0(*this, 30), PERMITTIVITY(*this, 31), CPV(*this, 32), THETA(*this, 33), HTRAN(*this, 34), CHP_IN(*this, 35), Resistor(*this, 36), Capacitor(*this, 37), deff(*this, 38), nitsche_eps(*this, 39), Tcvar(*this, 40)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->u_n = u_n;
    this->dt = dt;
    this->Lx = Lx;
    this->Lz = Lz;
    this->KB = KB;
    this->ECHARGE = ECHARGE;
    this->TC = TC;
    this->T1 = T1;
    this->AN1 = AN1;
    this->AN2 = AN2;
    this->AN3 = AN3;
    this->T2 = T2;
    this->AU1 = AU1;
    this->AU2 = AU2;
    this->AU3 = AU3;
    this->GNU1 = GNU1;
    this->GNU2 = GNU2;
    this->GNU3 = GNU3;
    this->CHI = CHI;
    this->KN = KN;
    this->KAPPAN = KAPPAN;
    this->KU = KU;
    this->KAPPAU = KAPPAU;
    this->NC = NC;
    this->NV = NV;
    this->MEC = MEC;
    this->MEA = MEA;
    this->MHC = MHC;
    this->MHA = MHA;
    this->KEH0 = KEH0;
    this->PERMITTIVITY = PERMITTIVITY;
    this->CPV = CPV;
    this->THETA = THETA;
    this->HTRAN = HTRAN;
    this->CHP_IN = CHP_IN;
    this->Resistor = Resistor;
    this->Capacitor = Capacitor;
    this->deff = deff;
    this->nitsche_eps = nitsche_eps;
    this->Tcvar = Tcvar;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "u_n")
      return 1;
    else if (name == "dt")
      return 2;
    else if (name == "Lx")
      return 3;
    else if (name == "Lz")
      return 4;
    else if (name == "KB")
      return 5;
    else if (name == "ECHARGE")
      return 6;
    else if (name == "TC")
      return 7;
    else if (name == "T1")
      return 8;
    else if (name == "AN1")
      return 9;
    else if (name == "AN2")
      return 10;
    else if (name == "AN3")
      return 11;
    else if (name == "T2")
      return 12;
    else if (name == "AU1")
      return 13;
    else if (name == "AU2")
      return 14;
    else if (name == "AU3")
      return 15;
    else if (name == "GNU1")
      return 16;
    else if (name == "GNU2")
      return 17;
    else if (name == "GNU3")
      return 18;
    else if (name == "CHI")
      return 19;
    else if (name == "KN")
      return 20;
    else if (name == "KAPPAN")
      return 21;
    else if (name == "KU")
      return 22;
    else if (name == "KAPPAU")
      return 23;
    else if (name == "NC")
      return 24;
    else if (name == "NV")
      return 25;
    else if (name == "MEC")
      return 26;
    else if (name == "MEA")
      return 27;
    else if (name == "MHC")
      return 28;
    else if (name == "MHA")
      return 29;
    else if (name == "KEH0")
      return 30;
    else if (name == "PERMITTIVITY")
      return 31;
    else if (name == "CPV")
      return 32;
    else if (name == "THETA")
      return 33;
    else if (name == "HTRAN")
      return 34;
    else if (name == "CHP_IN")
      return 35;
    else if (name == "Resistor")
      return 36;
    else if (name == "Capacitor")
      return 37;
    else if (name == "deff")
      return 38;
    else if (name == "nitsche_eps")
      return 39;
    else if (name == "Tcvar")
      return 40;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "u_n";
    case 2:
      return "dt";
    case 3:
      return "Lx";
    case 4:
      return "Lz";
    case 5:
      return "KB";
    case 6:
      return "ECHARGE";
    case 7:
      return "TC";
    case 8:
      return "T1";
    case 9:
      return "AN1";
    case 10:
      return "AN2";
    case 11:
      return "AN3";
    case 12:
      return "T2";
    case 13:
      return "AU1";
    case 14:
      return "AU2";
    case 15:
      return "AU3";
    case 16:
      return "GNU1";
    case 17:
      return "GNU2";
    case 18:
      return "GNU3";
    case 19:
      return "CHI";
    case 20:
      return "KN";
    case 21:
      return "KAPPAN";
    case 22:
      return "KU";
    case 23:
      return "KAPPAU";
    case 24:
      return "NC";
    case 25:
      return "NV";
    case 26:
      return "MEC";
    case 27:
      return "MEA";
    case 28:
      return "MHC";
    case 29:
      return "MHA";
    case 30:
      return "KEH0";
    case 31:
      return "PERMITTIVITY";
    case 32:
      return "CPV";
    case 33:
      return "THETA";
    case 34:
      return "HTRAN";
    case 35:
      return "CHP_IN";
    case 36:
      return "Resistor";
    case 37:
      return "Capacitor";
    case 38:
      return "deff";
    case 39:
      return "nitsche_eps";
    case 40:
      return "Tcvar";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_u_n;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_dt;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_Lx;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_Lz;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_KB;
  typedef Form_J_FunctionSpace_8 CoefficientSpace_ECHARGE;
  typedef Form_J_FunctionSpace_9 CoefficientSpace_TC;
  typedef Form_J_FunctionSpace_10 CoefficientSpace_T1;
  typedef Form_J_FunctionSpace_11 CoefficientSpace_AN1;
  typedef Form_J_FunctionSpace_12 CoefficientSpace_AN2;
  typedef Form_J_FunctionSpace_13 CoefficientSpace_AN3;
  typedef Form_J_FunctionSpace_14 CoefficientSpace_T2;
  typedef Form_J_FunctionSpace_15 CoefficientSpace_AU1;
  typedef Form_J_FunctionSpace_16 CoefficientSpace_AU2;
  typedef Form_J_FunctionSpace_17 CoefficientSpace_AU3;
  typedef Form_J_FunctionSpace_18 CoefficientSpace_GNU1;
  typedef Form_J_FunctionSpace_19 CoefficientSpace_GNU2;
  typedef Form_J_FunctionSpace_20 CoefficientSpace_GNU3;
  typedef Form_J_FunctionSpace_21 CoefficientSpace_CHI;
  typedef Form_J_FunctionSpace_22 CoefficientSpace_KN;
  typedef Form_J_FunctionSpace_23 CoefficientSpace_KAPPAN;
  typedef Form_J_FunctionSpace_24 CoefficientSpace_KU;
  typedef Form_J_FunctionSpace_25 CoefficientSpace_KAPPAU;
  typedef Form_J_FunctionSpace_26 CoefficientSpace_NC;
  typedef Form_J_FunctionSpace_27 CoefficientSpace_NV;
  typedef Form_J_FunctionSpace_28 CoefficientSpace_MEC;
  typedef Form_J_FunctionSpace_29 CoefficientSpace_MEA;
  typedef Form_J_FunctionSpace_30 CoefficientSpace_MHC;
  typedef Form_J_FunctionSpace_31 CoefficientSpace_MHA;
  typedef Form_J_FunctionSpace_32 CoefficientSpace_KEH0;
  typedef Form_J_FunctionSpace_33 CoefficientSpace_PERMITTIVITY;
  typedef Form_J_FunctionSpace_34 CoefficientSpace_CPV;
  typedef Form_J_FunctionSpace_35 CoefficientSpace_THETA;
  typedef Form_J_FunctionSpace_36 CoefficientSpace_HTRAN;
  typedef Form_J_FunctionSpace_37 CoefficientSpace_CHP_IN;
  typedef Form_J_FunctionSpace_38 CoefficientSpace_Resistor;
  typedef Form_J_FunctionSpace_39 CoefficientSpace_Capacitor;
  typedef Form_J_FunctionSpace_40 CoefficientSpace_deff;
  typedef Form_J_FunctionSpace_41 CoefficientSpace_nitsche_eps;
  typedef Form_J_FunctionSpace_42 CoefficientSpace_Tcvar;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner u_n;
  dolfin::MultiMeshCoefficientAssigner dt;
  dolfin::MultiMeshCoefficientAssigner Lx;
  dolfin::MultiMeshCoefficientAssigner Lz;
  dolfin::MultiMeshCoefficientAssigner KB;
  dolfin::MultiMeshCoefficientAssigner ECHARGE;
  dolfin::MultiMeshCoefficientAssigner TC;
  dolfin::MultiMeshCoefficientAssigner T1;
  dolfin::MultiMeshCoefficientAssigner AN1;
  dolfin::MultiMeshCoefficientAssigner AN2;
  dolfin::MultiMeshCoefficientAssigner AN3;
  dolfin::MultiMeshCoefficientAssigner T2;
  dolfin::MultiMeshCoefficientAssigner AU1;
  dolfin::MultiMeshCoefficientAssigner AU2;
  dolfin::MultiMeshCoefficientAssigner AU3;
  dolfin::MultiMeshCoefficientAssigner GNU1;
  dolfin::MultiMeshCoefficientAssigner GNU2;
  dolfin::MultiMeshCoefficientAssigner GNU3;
  dolfin::MultiMeshCoefficientAssigner CHI;
  dolfin::MultiMeshCoefficientAssigner KN;
  dolfin::MultiMeshCoefficientAssigner KAPPAN;
  dolfin::MultiMeshCoefficientAssigner KU;
  dolfin::MultiMeshCoefficientAssigner KAPPAU;
  dolfin::MultiMeshCoefficientAssigner NC;
  dolfin::MultiMeshCoefficientAssigner NV;
  dolfin::MultiMeshCoefficientAssigner MEC;
  dolfin::MultiMeshCoefficientAssigner MEA;
  dolfin::MultiMeshCoefficientAssigner MHC;
  dolfin::MultiMeshCoefficientAssigner MHA;
  dolfin::MultiMeshCoefficientAssigner KEH0;
  dolfin::MultiMeshCoefficientAssigner PERMITTIVITY;
  dolfin::MultiMeshCoefficientAssigner CPV;
  dolfin::MultiMeshCoefficientAssigner THETA;
  dolfin::MultiMeshCoefficientAssigner HTRAN;
  dolfin::MultiMeshCoefficientAssigner CHP_IN;
  dolfin::MultiMeshCoefficientAssigner Resistor;
  dolfin::MultiMeshCoefficientAssigner Capacitor;
  dolfin::MultiMeshCoefficientAssigner deff;
  dolfin::MultiMeshCoefficientAssigner nitsche_eps;
  dolfin::MultiMeshCoefficientAssigner Tcvar;
};

typedef CoefficientSpace_s Form_scalernorm_FunctionSpace_0;

class Form_scalernorm: public dolfin::Form
{
public:

  // Constructor
  Form_scalernorm(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 1), s(*this, 0)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const imt_form_2>();
  }

  // Constructor
  Form_scalernorm(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> s):
    dolfin::Form(0, 1), s(*this, 0)
  {
    _mesh = mesh;
    this->s = s;

    _ufc_form = std::make_shared<const imt_form_2>();
  }

  // Destructor
  ~Form_scalernorm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "s")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_scalernorm_FunctionSpace_0 CoefficientSpace_s;

  // Coefficients
  dolfin::CoefficientAssigner s;
};

class MultiMeshForm_scalernorm: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_scalernorm(std::shared_ptr<const dolfin::MultiMesh> mesh):
    dolfin::MultiMeshForm(mesh), s(*this, 0)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_scalernorm(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_scalernorm(std::shared_ptr<const dolfin::MultiMesh> mesh, std::shared_ptr<const dolfin::GenericFunction> s):
    dolfin::MultiMeshForm(mesh), s(*this, 0)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_scalernorm(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients    this->s = s;

  }

  // Destructor
  ~MultiMeshForm_scalernorm()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "s")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "s";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_scalernorm_FunctionSpace_0 CoefficientSpace_s;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner s;
};

typedef CoefficientSpace_u Form_phib0int_FunctionSpace_0;

class Form_phib0int: public dolfin::Form
{
public:

  // Constructor
  Form_phib0int(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 1), u(*this, 0)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const imt_form_3>();
  }

  // Constructor
  Form_phib0int(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> u):
    dolfin::Form(0, 1), u(*this, 0)
  {
    _mesh = mesh;
    this->u = u;

    _ufc_form = std::make_shared<const imt_form_3>();
  }

  // Destructor
  ~Form_phib0int()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_phib0int_FunctionSpace_0 CoefficientSpace_u;

  // Coefficients
  dolfin::CoefficientAssigner u;
};

class MultiMeshForm_phib0int: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_phib0int(std::shared_ptr<const dolfin::MultiMesh> mesh):
    dolfin::MultiMeshForm(mesh), u(*this, 0)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_phib0int(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_phib0int(std::shared_ptr<const dolfin::MultiMesh> mesh, std::shared_ptr<const dolfin::GenericFunction> u):
    dolfin::MultiMeshForm(mesh), u(*this, 0)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_phib0int(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients    this->u = u;

  }

  // Destructor
  ~MultiMeshForm_phib0int()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_phib0int_FunctionSpace_0 CoefficientSpace_u;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
};

typedef CoefficientSpace_u Form_Tint_FunctionSpace_0;

class Form_Tint: public dolfin::Form
{
public:

  // Constructor
  Form_Tint(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 1), u(*this, 0)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const imt_form_4>();
  }

  // Constructor
  Form_Tint(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> u):
    dolfin::Form(0, 1), u(*this, 0)
  {
    _mesh = mesh;
    this->u = u;

    _ufc_form = std::make_shared<const imt_form_4>();
  }

  // Destructor
  ~Form_Tint()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Tint_FunctionSpace_0 CoefficientSpace_u;

  // Coefficients
  dolfin::CoefficientAssigner u;
};

class MultiMeshForm_Tint: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_Tint(std::shared_ptr<const dolfin::MultiMesh> mesh):
    dolfin::MultiMeshForm(mesh), u(*this, 0)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Tint(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_Tint(std::shared_ptr<const dolfin::MultiMesh> mesh, std::shared_ptr<const dolfin::GenericFunction> u):
    dolfin::MultiMeshForm(mesh), u(*this, 0)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_Tint(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients    this->u = u;

  }

  // Destructor
  ~MultiMeshForm_Tint()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_Tint_FunctionSpace_0 CoefficientSpace_u;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const imt_form_5>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<imt_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<imt_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_L_FunctionSpace_1;

typedef CoefficientSpace_KB Form_L_FunctionSpace_2;

typedef CoefficientSpace_ECHARGE Form_L_FunctionSpace_3;

typedef CoefficientSpace_CHI Form_L_FunctionSpace_4;

typedef CoefficientSpace_NC Form_L_FunctionSpace_5;

typedef CoefficientSpace_NV Form_L_FunctionSpace_6;

typedef CoefficientSpace_MEC Form_L_FunctionSpace_7;

typedef CoefficientSpace_MEA Form_L_FunctionSpace_8;

typedef CoefficientSpace_MHC Form_L_FunctionSpace_9;

typedef CoefficientSpace_MHA Form_L_FunctionSpace_10;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 10), u(*this, 0), KB(*this, 1), ECHARGE(*this, 2), CHI(*this, 3), NC(*this, 4), NV(*this, 5), MEC(*this, 6), MEA(*this, 7), MHC(*this, 8), MHA(*this, 9)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const imt_form_6>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> KB, std::shared_ptr<const dolfin::GenericFunction> ECHARGE, std::shared_ptr<const dolfin::GenericFunction> CHI, std::shared_ptr<const dolfin::GenericFunction> NC, std::shared_ptr<const dolfin::GenericFunction> NV, std::shared_ptr<const dolfin::GenericFunction> MEC, std::shared_ptr<const dolfin::GenericFunction> MEA, std::shared_ptr<const dolfin::GenericFunction> MHC, std::shared_ptr<const dolfin::GenericFunction> MHA):
    dolfin::Form(1, 10), u(*this, 0), KB(*this, 1), ECHARGE(*this, 2), CHI(*this, 3), NC(*this, 4), NV(*this, 5), MEC(*this, 6), MEA(*this, 7), MHC(*this, 8), MHA(*this, 9)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->KB = KB;
    this->ECHARGE = ECHARGE;
    this->CHI = CHI;
    this->NC = NC;
    this->NV = NV;
    this->MEC = MEC;
    this->MEA = MEA;
    this->MHC = MHC;
    this->MHA = MHA;

    _ufc_form = std::make_shared<const imt_form_6>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "KB")
      return 1;
    else if (name == "ECHARGE")
      return 2;
    else if (name == "CHI")
      return 3;
    else if (name == "NC")
      return 4;
    else if (name == "NV")
      return 5;
    else if (name == "MEC")
      return 6;
    else if (name == "MEA")
      return 7;
    else if (name == "MHC")
      return 8;
    else if (name == "MHA")
      return 9;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "KB";
    case 2:
      return "ECHARGE";
    case 3:
      return "CHI";
    case 4:
      return "NC";
    case 5:
      return "NV";
    case 6:
      return "MEC";
    case 7:
      return "MEA";
    case 8:
      return "MHC";
    case 9:
      return "MHA";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_KB;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_ECHARGE;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_CHI;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_NC;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_NV;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_MEC;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_MEA;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_MHC;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_MHA;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner KB;
  dolfin::CoefficientAssigner ECHARGE;
  dolfin::CoefficientAssigner CHI;
  dolfin::CoefficientAssigner NC;
  dolfin::CoefficientAssigner NV;
  dolfin::CoefficientAssigner MEC;
  dolfin::CoefficientAssigner MEA;
  dolfin::CoefficientAssigner MHC;
  dolfin::CoefficientAssigner MHA;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u(*this, 0), KB(*this, 1), ECHARGE(*this, 2), CHI(*this, 3), NC(*this, 4), NV(*this, 5), MEC(*this, 6), MEA(*this, 7), MHC(*this, 8), MHA(*this, 9)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> KB, std::shared_ptr<const dolfin::GenericFunction> ECHARGE, std::shared_ptr<const dolfin::GenericFunction> CHI, std::shared_ptr<const dolfin::GenericFunction> NC, std::shared_ptr<const dolfin::GenericFunction> NV, std::shared_ptr<const dolfin::GenericFunction> MEC, std::shared_ptr<const dolfin::GenericFunction> MEA, std::shared_ptr<const dolfin::GenericFunction> MHC, std::shared_ptr<const dolfin::GenericFunction> MHA):
    dolfin::MultiMeshForm(V0), u(*this, 0), KB(*this, 1), ECHARGE(*this, 2), CHI(*this, 3), NC(*this, 4), NV(*this, 5), MEC(*this, 6), MEA(*this, 7), MHC(*this, 8), MHA(*this, 9)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->KB = KB;
    this->ECHARGE = ECHARGE;
    this->CHI = CHI;
    this->NC = NC;
    this->NV = NV;
    this->MEC = MEC;
    this->MEA = MEA;
    this->MHC = MHC;
    this->MHA = MHA;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "KB")
      return 1;
    else if (name == "ECHARGE")
      return 2;
    else if (name == "CHI")
      return 3;
    else if (name == "NC")
      return 4;
    else if (name == "NV")
      return 5;
    else if (name == "MEC")
      return 6;
    else if (name == "MEA")
      return 7;
    else if (name == "MHC")
      return 8;
    else if (name == "MHA")
      return 9;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "KB";
    case 2:
      return "ECHARGE";
    case 3:
      return "CHI";
    case 4:
      return "NC";
    case 5:
      return "NV";
    case 6:
      return "MEC";
    case 7:
      return "MEA";
    case 8:
      return "MHC";
    case 9:
      return "MHA";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_KB;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_ECHARGE;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_CHI;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_NC;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_NV;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_MEC;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_MEA;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_MHC;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_MHA;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner KB;
  dolfin::MultiMeshCoefficientAssigner ECHARGE;
  dolfin::MultiMeshCoefficientAssigner CHI;
  dolfin::MultiMeshCoefficientAssigner NC;
  dolfin::MultiMeshCoefficientAssigner NV;
  dolfin::MultiMeshCoefficientAssigner MEC;
  dolfin::MultiMeshCoefficientAssigner MEA;
  dolfin::MultiMeshCoefficientAssigner MHC;
  dolfin::MultiMeshCoefficientAssigner MHA;
};


}

#endif
